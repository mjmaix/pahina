# NOTE:
#  generated mutation/queries does not exclude field specific auth
#  active: Boolean @auth(rules: [{ allow: groups, groups: ["Admin"] }])

enum PahinaNoteStatus {
  DRAFT
  PUBLISHED
  PUBLISHED_EDITED
  UNLISTED
}

enum PahinaPriceLevel {
  L_0
  L_50
  L_100
  L_150
  L_200
  L_250
  L_300
  L_350
  L_400
  L_450
  L_500
}

enum PahinaStoreProductStatus {
  SENT
  CREATING
  CREATED
  FAILED
}

type PahinaUser
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, ownerField: "id", operations: [create, update, read] }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  givenName: String!
  familyName: String!
  email: String!
  picture: String
  identityId: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  notes: [PahinaNote] @connection(name: "UserStores", sortField: "updatedAt")
  stores: [PahinaUserStore] @connection(name: "UserStores")
  ownedProducts: [PahinaUserStoreProduct] @connection(name: "OwnedProducts")
}

type PahinaMainStore
  @model(subscriptions: null, mutations: null)
  @auth(rules: [{ allow: groups, groups: ["Admin"] }]) {
  id: ID!
  digitalPublicationId: String
  digitalLocationId: String
}

type PahinaUserStore
  @key(fields: ["ownerId", "skuPrefix"])
  @model(subscriptions: null, mutations: null)
  @auth(
    rules: [
      { allow: owner, ownerField: "ownerId", operations: [read] }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  ownerId: String!
  skuPrefix: String!
  owner: PahinaUser! @connection(name: "UserStores", keyField: "ownerId")
  products: [PahinaUserStoreProduct] @connection(name: "StoreProducts")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type PahinaUserStoreProduct
  @model(subscriptions: null, mutations: null)
  @key(fields: ["storeId", "sku"])
  @auth(
    rules: [
      { allow: owner, ownerField: "owner", operations: [read] }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  sku: String!
  storeId: String!
  ownerId: String!
  owner: PahinaUser @connection(name: "OwnedProducts", keyField: "ownerId")
  store: PahinaUserStore @connection(name: "StoreProducts", keyField: "storeId")
  shopifyProductId: String
  shopifyShopId: String
  onlineStoreUrl: String
  onlineStorePreviewUrl: String
  handle: String
  status: PahinaStoreProductStatus
  rawResponse: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type PahinaNote
  @model(
    subscriptions: null
    mutations: {
      delete: "deletePahinaNote"
      update: "updatePahinaNote"
      create: "createPahinaNote"
    }
  )
  @auth(
    rules: [
      { allow: owner, ownerField: "author", operations: [create, update, read] }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  author: PahinaUser @connection(name: "UserStores")
  case: PahinaCase @connection(name: "NoteCases")
  promotional: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  status: PahinaNoteStatus
  priceLevel: PahinaPriceLevel
  value: String
}

type PahinaCase
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: groups, groups: ["Admin"], operations: [update, create, delete] }
    ]
  ) {
  id: ID!
  title: String!
  code: String!
  date: AWSDate!
  link: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  notes: [PahinaNote] @connection(name: "NoteCases", sortField: "updatedAt")
}

type Subscription {
  onCreatePahinaCase: PahinaCase @aws_subscribe(mutations: ["createPahinaCase"])
}

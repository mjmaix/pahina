AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for sam-app

Parameters:
  FunctionName:
    Type: String
    Default: pahina-shopify-api
    Description: The Lambda Function Name
  AutoPublishAliasName:
    Type: String
    Default: current
    Description: The alias used for Auto Publishing
  EnvType:
    Description: Environment for this function
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - prod
    - test
    - NONE
  ShopifyApiHost:
    Description: 'Shopify hostname'
    Type: String
    Default: 'freelitemjabadilla.myshopify.com'
  ShopifyApiVersion:
    Description: 'Shopify API version'
    Type: String
    Default: '2019-07'
    AllowedValues: 
      - 2019-07

Mappings:
  AmplifyProject:
    UserPoolId:
      dev: ap-southeast-1_1CQQvDhhM
      prod: ''
    UserPoolClientId:
      dev: 5fkitdjec8gal86vus1q9cp91q
      prod: ''
  
Globals:
  Api:
    Cors: "'*'"
    TracingEnabled: true
    Variables:
      ENV: !Ref EnvType
  Function:
    Tracing: Active
    Timeout: 30
    Runtime: nodejs10.x
    AutoPublishAlias: !Ref AutoPublishAliasName
    Environment:
      Variables:
        REGION: !Ref AWS::Region
        ENV: !Ref EnvType
        COGNITO_USER_POOL_CLIENT_ID: !FindInMap [ AmplifyProject, UserPoolClientId, !Ref EnvType ]
        SHOPIFY_API_HOSTNAME: !Ref ShopifyApiHost
        SHOPIFY_API_VERSION: !Ref ShopifyApiVersion

Resources:
  PahinaAPILambdaPermission:
    DependsOn : AddressFunction
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PahinaRestApi}/*"
      FunctionName:
        !Sub
        - ${FuncArn}:current
        - { FuncArn: !GetAtt AddressFunction.Arn }
      Principal: apigateway.amazonaws.com
  FunctionIAMRole:
   Type: "AWS::IAM::Role"
   Properties:
     Path: "/"
     ManagedPolicyArns:
         - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     AssumeRolePolicyDocument:
       Version: "2012-10-17"
       Statement:
         -
           Effect: "Allow"
           Action:
             - "sts:AssumeRole"
           Principal:
             Service:
               - "lambda.amazonaws.com"
     Policies: # Inline Policies
       -
         PolicyName: "LambdaExecutionRole"
         PolicyDocument:
           Version: "2012-10-17"
           Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "*"
              - Effect: Allow
                Action:
                - "xray:PutTraceSegments"
                - "xray:PutTelemetryRecords"
                Resource: "*"
              - Effect: Allow
                Action:
                - ssm:DescribeParameters
                Resource: "*"
              - Sid: VisualEditor1
                Effect: Allow
                Action:
                - ssm:GetParameters
                - ssm:GetParameter
                Resource: !Sub
                  - "arn:aws:ssm:${AWS::Region}:*:parameter/${host}/${env}/*"
                  - { "host": !Ref ShopifyApiHost, "env": !Ref EnvType }
              - Sid: VisualEditor2
                Effect: Allow
                Action:
                - ssm:GetParametersByPath
                Resource: !Sub
                  - arn:aws:ssm:${AWS::Region}:*:parameter/${host}/${env}
                  - { "host": !Ref ShopifyApiHost, "env": !Ref EnvType }

  PahinaRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref EnvType
      Auth:
        DefaultAuthorizer: PahinaCognitoAuthorizer
        Authorizers:
          PahinaCognitoAuthorizer:
            UserPoolArn: !Sub
              - arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${poolId} 
              - { poolId: !FindInMap [ AmplifyProject, UserPoolId, !Ref EnvType ] }
      DefinitionBody:
        swagger: 2.0
        info:
          title: !Sub
            - API-${name}-${env}
            - { env: !Ref EnvType, name: !Ref FunctionName }
        paths:
          /addresses/{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
                - application/json
              x-amazon-apigateway-integration:
                uri:
                  !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddressFunction.Arn}:${AutoPublishAliasName}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
  AddressFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: !Ref AutoPublishAliasName
      FunctionName: !Sub
        - ${FunctionName}-Address-${env}
        - { env: !Ref EnvType }
      CodeUri: shopify-address-lambda/lib
      Handler: shopify-address-lambda/app.lambdaHandler
      # Events:
      #   AnyRequest:
      #     Type: Api
      #     Properties:
      #       Path: /addresses
      #       Method: ANY
      #       RestApiId: !Ref PahinaRestApi
      Role: !GetAtt FunctionIAMRole.Arn

Outputs:
  AddressApi:
    Description: "API Gateway endpoint URL for Prod stage for Address function"
    Value: !Sub 
      - "https://${PahinaRestApi}.execute-api.${AWS::Region}.amazonaws.com/${env}/hello/"
      - { env: !Ref EnvType }
  AddressFunction:
    Description: "Address Lambda Function ARN"
    Value: !GetAtt AddressFunction.Arn
  FunctionIAMRole:
    Description: "Managed IAM Role created for Address function"
    Value: !GetAtt FunctionIAMRole.Arn
